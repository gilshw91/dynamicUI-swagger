{"version":3,"sources":["components/shared/NavBar.js","components/shared/TextField.js","utils.js","components/shared/DropDownField.js","components/shared/InputTag.js","components/shared/PopupDialog.js","components/GenerateView.js","hooks/useFetch.js","toastify.js","components/CreateComponents.js","components/GetJsonApi.js","components/Header.js","App.js","index.js"],"names":["NavBar","menuItems","selectedIndex","onItemClick","Navbar","bg","variant","Nav","activeKey","className","map","menuItem","idx","Link","key","eventKey","onClick","TextField","name","label","type","placeholder","value","error","onChange","wrapperClass","length","htmlFor","defaultProps","capitalize","string","charAt","toUpperCase","slice","getObjectType","object","Array","isArray","DropDownField","defaultOption","options","Form","Group","controlId","Label","Control","as","defaultValue","option","InputTag","placeHolder","tags","tagInput","removeTag","i","newTags","splice","target","tag","onKeyDown","e","val","find","toLowerCase","ref","c","PopupDialog","open","onClose","onSaveClicked","title","buttonName","children","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","GenerateView","appInfo","selectedMenuItemIndex","uiObject","fetchResponse","onUiInputChange","editDeleteButtons","onMenuItemClick","onPostOptionClicked","onSubmit","onEditClicked","onDeleteClicked","onTogglePopupDialog","openPopupDialog","onDeleteConfirmed","closeOpenDeletePopUpDialog","openDeletePopupDialog","data","loading","displayFilters","tableColumns","tableDataArray","displayPostOptionsArray","formInModal","errors","isPutInService","isDeleteInService","currentService","displayPostButtons","opt","index","operation","path","displayFiltersInputs","f","tableData","r","Object","entries","join","keys","style","color","autoClose","version","Badge","Table","striped","bordered","hover","column","useFetch","url","useState","setData","setError","setLoading","callApi","a","fetch","res","status","msg","message","json","useEffect","notifyError","toast","CreateComponents","specsJson","selectedDefinitionIndex","setSelectedDefinitionIndex","setDisplayFilters","setFormInModal","useForm","register","handleSubmit","setOpenPopupDialog","setOpenDeletePopupDialog","deleteObjectId","setDeleteObjectId","currentActionClicked","setCurrentActionClicked","displayFiltersArray","host","basePath","baseApiUrl","schemes","includes","services","paths","service","serviceNameWithoutSlash","substring","indx","indexOf","serviceName","filter","array","definitions","currentServiceDefinition","properties","currentServiceEndpoints","ep","startsWith","serviceEndpointsWithGetOption","serviceEndpointsWithPostOption","forEach","get","responses","schema","$ref","refOfDefintion","replace","extractFieldsFromDefinitions","optionData","initialValues","method","console","log","arrayOfFiledsElements","parameters","inputUiInModal","tempRef","items","fullRef","refProperties","field","required","Col","subField","enum","item","Boolean","fieldsOfObject","Row","FormLabel","handleDeleteClicked","row","identifier","reqPath","idValue","startIndex","endIndex","identifierTerm","reqPathToSend","then","info","newDisplayFilters","epParams","postDetails","post","operationId","push","Error","React","JSON","stringify","currentInputIndex","findIndex","d","endpoint","in","inputVarName","reqUrl","indexOfOption","reqVal","parameterName","currentEndpointIndex","contentType","reqBody","consumes","params","property","encodedKey","encodeURIComponent","encodedValue","headers","Accept","body","prevState","id","GetJsonApi","specsApiUrl","inputApiUrlValue","onFormSubmit","onInputApiUrlChange","InputGroup","width","FormControl","App","intputApiValue","setInputApiValue","swaggerApi","setSwaggerApi","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"2YA4BeA,EAxBA,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAC1C,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACC,EAAA,EAAD,CAAKC,UAAWP,EAAUC,GAAgBO,UAAU,WACjDR,EAAUS,KAAI,SAACC,EAAUC,GAAX,OACb,kBAACL,EAAA,EAAIM,KAAL,CACEC,IAAKH,EACLI,SAAUJ,EACVK,QAAS,kBAAMb,EAAYS,KAE1BD,SCXPM,EAAY,SAAC,GAQZ,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,MACAC,EACI,EADJA,SAEIC,EAAe,aAKnB,OAJIF,GAASA,EAAMG,OAAS,IAC1BD,GAAY,cAIZ,yBAAKhB,UAAWgB,GACd,2BAAOE,QAAST,GAAOC,GACvB,yBAAKV,UAAU,SACb,2BACEW,KAAMA,EACNF,KAAMA,EACNT,UAAU,eACVY,YAAaA,EACbC,MAAOA,EACPE,SAAUA,IAEXD,GAAS,yBAAKd,UAAU,sBAAsBc,MAMvDN,EAAUW,aAAe,CACvBR,KAAM,QAaOH,QCjDFY,EAAa,SAACC,GAAD,OACxBA,EAAOC,OAAO,GAAGC,cAAgBF,EAAOG,MAAM,IAEnCC,EAAgB,SAACC,GAAD,OAC3BC,MAAMC,QAAQF,GAAU,eAAiBA,GCgD5BG,EA/CO,SAAC,GAQhB,IAPLpB,EAOI,EAPJA,KACAC,EAMI,EANJA,MACAK,EAKI,EALJA,SACAe,EAII,EAJJA,cACAjB,EAGI,EAHJA,MACAC,EAEI,EAFJA,MACAiB,EACI,EADJA,QAEA,OACE,kBAACC,EAAA,EAAKC,MAAN,CAAYC,UAAWzB,GACrB,kBAACuB,EAAA,EAAKG,MAAN,KAAazB,GACb,kBAACsB,EAAA,EAAKI,QAAN,CACEC,GAAG,SACH5B,KAAMA,EACNI,MAAOA,EACPE,SAAUA,EACVuB,aAAcR,GAEd,4BAAQjB,MAAM,IAAd,aAA4BH,EAA5B,OACCqB,EAAQ9B,KAAI,SAACsC,GACZ,OACE,4BAAQlC,IAAKkC,EAAQ1B,MAAO0B,GACzBnB,EAAWmB,OAOhBzB,GAAS,yBAAKd,UAAU,sBAAsBc,MCmCzC0B,G,MAlEE,SAAC,GAAmD,IAAjD9B,EAAgD,EAAhDA,MAAOD,EAAyC,EAAzCA,KAAMgC,EAAmC,EAAnCA,YAAa5B,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,SAC7C2B,EAAO7B,EACT8B,EAAW,KAETC,EAAY,SAACC,GACjB,IAAIC,EAAO,YAAOJ,GAClBI,EAAQC,OAAOF,EAAG,GAElB9B,EAAS,CAAEiC,OAAQ,CAAEnC,MAAOiC,EAAQ7B,OAAS,EAAI,CAAC6B,GAAW,GAAIrC,WAgBnE,OACE,yBAAKT,UAAW,cACd,2BAAOkB,QAAST,GAAOC,GACvB,yBAAKV,UAAU,aACb,wBAAIS,KAAMA,EAAMT,UAAU,mBACvB0C,EAAKzC,KAAI,SAACgD,EAAKJ,GAAN,OACR,wBAAIxC,IAAK4C,GACNA,EACD,4BACEtC,KAAK,SACLJ,QAAS,WACPqC,EAAUC,KAHd,SAUJ,wBAAI7C,UAAU,0BACZ,2BACEW,KAAK,OACLC,YAAa6B,EACbS,UAnCS,SAACC,GACpB,IAAMC,EAAMD,EAAEH,OAAOnC,MACrB,GAAc,UAAVsC,EAAE9C,KAAmB+C,EAAK,CAC5B,GAAIV,EAAKW,MAAK,SAACJ,GAAD,OAAY,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKK,kBAAL,OAAuBF,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAKE,kBACjD,OAEFX,EAAS9B,MAAQ,KACjBE,EAAS,CAAEiC,OAAQ,CAAEnC,MAAM,GAAD,mBAAM6B,GAAN,CAAYU,IAAM3C,cACzB,cAAV0C,EAAE9C,KAAwB+C,GACnCR,EAAUF,EAAKzB,OAAS,IA2BhBsC,IAAK,SAACC,GACJb,EAAWa,W,QCfZC,EAjCK,SAAC,GAAD,IAClBC,EADkB,EAClBA,KACAC,EAFkB,EAElBA,QACAC,EAHkB,EAGlBA,cACAC,EAJkB,EAIlBA,MACAC,EALkB,EAKlBA,WACAC,EANkB,EAMlBA,SANkB,OAQlB,kBAACC,EAAA,EAAD,CAAOC,KAAMP,EAAMQ,OAAQP,GACzB,kBAACK,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,KAAcR,IAEhB,kBAACG,EAAA,EAAMM,KAAP,KAAaP,GACb,kBAACC,EAAA,EAAMO,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQ3E,QAAQ,YAAYU,QAASoD,GAArC,SAGA,kBAACa,EAAA,EAAD,CAAQjE,QAASqD,GACdE,GAA0B,mB,QCoNpBW,G,MA3NM,SAAC,GAkBf,IAjBLC,EAiBI,EAjBJA,QACAlF,EAgBI,EAhBJA,UACAmF,EAeI,EAfJA,sBACAC,EAcI,EAdJA,SACAC,EAaI,EAbJA,cACAC,EAYI,EAZJA,gBACAC,EAWI,EAXJA,kBACAC,EAUI,EAVJA,gBACAC,EASI,EATJA,oBACAC,EAQI,EARJA,SACAC,EAOI,EAPJA,cACAC,EAMI,EANJA,gBACAC,EAKI,EALJA,oBACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,2BACAC,EACI,EADJA,sBAEQC,EAAyBb,EAAzBa,KAAMC,EAAmBd,EAAnBc,QAAS7E,EAAU+D,EAAV/D,MAErB8E,EAMEhB,EANFgB,eACAC,EAKEjB,EALFiB,aACAC,EAIElB,EAJFkB,eACAC,EAGEnB,EAHFmB,wBACAC,EAEEpB,EAFFoB,YACAC,EACErB,EADFqB,OAGMC,EAAsCnB,EAAtCmB,eAAgBC,EAAsBpB,EAAtBoB,kBAClBC,EAAiB5G,EAAUmF,GAE3B0B,EAAkB,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAyB9F,KAAI,SAACqG,EAAKC,GAAN,OACtD,kBAAC/B,EAAA,EAAD,CACEnE,IAAKiG,EAAIE,UACTjG,QAAS,kBAAM0E,EAAoBsB,EAAOD,EAAIG,QAE7CrF,EAAWkF,EAAIE,eAGdE,EAAoB,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAAgB3F,KAAI,SAAC0G,EAAGJ,GACnD,IAAM9F,EAAOkG,EAAElG,KACTE,EAAOgG,EAAEhG,KAAOgG,EAAEhG,KAAO,OACzBoB,EAAU4E,EAAE5E,QAAU4E,EAAE5E,QAAU,GAClClB,EAAQ8F,EAAE9F,MAEhB,MAAa,UAATF,EACqB,IAAnBoB,EAAQd,OAER,kBAAC,EAAD,CACEZ,IAAG,UAAKI,EAAL,YAAa8F,GAChB7F,MAAOU,EAAWX,GAClBA,KAAMA,EACNgC,YAAa,OAASrB,EAAWX,GACjCI,MAAOA,GAAgB,GACvBE,SAAU,SAACoC,GAAD,OAAO2B,EAAgB3B,MAKrC,yBAAK9C,IAAG,UAAKI,EAAL,YAAa8F,GAASvG,UAAU,OACtC,kBAAC,EAAD,CACES,KAAMA,EACNC,MAAOU,EAAWX,GAClBsB,QAASA,EACTlB,MAAOA,EACPE,SAAU,SAACoC,GAAD,OAAO2B,EAAgB3B,OAMrC,yBAAK9C,IAAG,UAAKI,EAAL,YAAa8F,GAASvG,UAAU,OACtC,kBAAC,EAAD,CACES,KAAMA,EACNC,MAAOU,EAAWX,GAClBE,KAAMA,EACNE,MAAOA,EACPE,SAAU,SAACoC,GAAD,OAAO2B,EAAgB3B,UAOrCyD,EAAS,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAAgB7F,KAAI,SAAC4G,EAAG1G,GAAJ,OACpC,kBAAC,WAAD,CAAUE,IAAKF,GACb,mCACG0F,QADH,IACGA,OADH,EACGA,EAAc5F,KAAI,SAACuD,GAClB,OAAQ/B,EAAcoF,EAAErD,KACtB,IAAK,SACH,OAAO,wBAAInD,IAAG,UAAKmD,EAAL,YAAUrD,IAAQ2G,OAAOC,QAAQF,EAAErD,IAAIwD,QAEvD,IAAK,QACH,MAA+B,WAA3BvF,EAAcoF,EAAErD,GAAG,IAEnB,wBAAInD,IAAG,UAAKmD,EAAL,YAAUrD,IAAQ2G,OAAOC,QAAQF,EAAErD,GAAG,IAAIwD,QAG9C,wBAAI3G,IAAG,UAAKmD,EAAL,YAAUrD,IAAQ0G,EAAErD,GAAGwD,QAEvC,QACE,OAAO,wBAAI3G,IAAG,UAAKmD,EAAL,YAAUrD,IAAQ0G,EAAErD,QAGxC,wBAAIxD,UAAU,2BACXkG,EAAejF,OAAS,EACvB,kBAACuD,EAAA,EAAD,CAAQ3E,QAAQ,UAAUU,QAAS,kBAAM4E,EAAchF,KAAvD,QAGE,KACHgG,EAAkBlF,OAAS,EAC1B,kBAACuD,EAAA,EAAD,CAAQ3E,QAAQ,SAASU,QAAS,kBAAM6E,EAAgBjF,KAAxD,UAGE,WAKZ,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,CACEuD,KAAM4B,EACN3B,QAAS0B,EACTzB,cAAesB,EACfrB,MAAOuC,GAEP,kBAACpE,EAAA,EAAD,KACGgE,EACAC,GAAUa,OAAOG,KAAKhB,GAAQhF,OAAS,GACtC,oCACE,uBAAGiG,MAAO,CAAEC,MAAO,QAAnB,sCACA,4BACGL,OAAOG,KAAKhB,GAAQhG,KAAI,SAACkD,GAAD,OACvB,wBAAI9C,IAAK8C,EAAG+D,MAAO,CAAEC,MAAO,QACzB/F,EAAW+B,WAQ1B,kBAAC,EAAD,CACEO,KAAM+B,EACN9B,QAAS6B,EACT5B,cAAe2B,EACf1B,MAAO,SACPC,WAAY,UAEZ,kBAAC9B,EAAA,EAAD,KAAO,+CAET,kBAAC,IAAD,CAAgBoF,UAAW,MAC3B,yBAAKpH,UAAU,wBACb,4BAAK0E,EAAQb,OACb,sCAAYa,EAAQ2C,UAEtB,kBAAC,EAAD,CACE7H,UAAWA,EACXC,cAAekF,EACfjF,YAAa,SAACD,GAAD,OAAmBuF,EAAgBvF,MAElD,yBAAKO,UAAU,iBACb,yBAAKA,UAAU,wBAAwBqG,GAEvC,kBAACrE,EAAA,EAAD,CAAMhC,UAAU,OAAO0G,GACtBf,EACC,2CACE7E,EACF,uCAAaA,GACX8F,GAAaA,EAAU3F,OAAS,EAClC,kBAAC,WAAD,KACE,6BACA,4BACGmF,EADH,IACmB,kBAACkB,EAAA,EAAD,CAAOzH,QAAQ,aAAa6F,EAAKzE,SAEpD,kBAACsG,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC7H,QAAQ,QACpC,+BACE,4BACGgG,EAAa5F,KAAI,SAAC0H,GAAD,OAChB,wBAAItH,IAAKsH,GAASvG,EAAWuG,OAE/B,wBAAItH,IAAI,UAAR,aAGJ,+BAAQuG,KAIZ,2BACE,sD,wBC5MCgB,EAAW,SAACC,GAAS,IAAD,EACPC,mBAAS,MADF,mBACxBpC,EADwB,KAClBqC,EADkB,OAELD,mBAAS,MAFJ,mBAExBhH,EAFwB,KAEjBkH,EAFiB,OAGDF,oBAAS,GAHR,mBAGxBnC,EAHwB,KAGfsC,EAHe,KAKzBC,EAAO,uCAAG,WAAOL,EAAK9F,GAAZ,mBAAAoG,EAAA,yDACTN,EADS,uBAEZG,EAAS,MACTD,EAAQ,MACRE,GAAW,GAJC,iCAQdA,GAAW,GARG,kBAcMG,MAAMP,EAAK9F,GAdjB,UAeO,OADbsG,EAdM,QAeJC,OAfI,iBAgBNC,EAhBM,UAgBGF,EAAIG,QAhBP,aAgBmBH,EAAIC,OAhBvB,UAiBFD,EAAIC,OAjBF,OAkBH,MAlBG,gCAmBNC,EAAM,YAnBA,iEAwBVP,EAASO,GAxBC,yCA0BSF,EAAII,OA1Bb,QA0BJA,EA1BI,OA2BVT,EAAS,MACTD,EAAQU,GA5BE,0DA+BZT,EAAS,KAAEQ,SA/BC,yBAiCZP,GAAW,GAjCC,6EAAH,wDAwCb,OAHAS,qBAAU,WACJb,GAAKK,EAAQL,KAChB,CAACA,IACG,CAAC,CAAEnC,OAAM5E,QAAO6E,WAAWuC,I,wBCzCvBS,G,YAAc,kBAAMC,IAAM9H,MAAM,2B,QC0tB9B+H,EAttBU,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EAEoBhB,mBAAS,GAF7B,mBAEnCiB,EAFmC,KAEVC,EAFU,OAIElB,mBAAS,IAJX,mBAInClC,EAJmC,KAInBqD,EAJmB,OAMErB,IANF,0BAMjClC,EANiC,EAMjCA,KAAM5E,EAN2B,EAM3BA,MAAO6E,EANoB,EAMpBA,QAAWuC,EANS,OAQJJ,qBARI,mBAQnC9B,EARmC,KAQtBkD,EARsB,OAUCC,cAAnCC,EAVkC,EAUlCA,SAAUnD,EAVwB,EAUxBA,OAAQoD,EAVgB,EAUhBA,aAVgB,EAYIvB,oBAAS,GAZb,mBAYnCxC,EAZmC,KAYlBgE,EAZkB,OAcgBxB,oBAAS,GAdzB,mBAcnCrC,EAdmC,KAcZ8D,EAdY,OAgBEzB,oBAAU,GAhBZ,mBAgBnC0B,EAhBmC,KAgBnBC,EAhBmB,OAkBc3B,mBAAS,IAlBvB,oBAkBnC4B,GAlBmC,MAkBbC,GAlBa,MAqBtC9D,GAAe,GAEfC,GAAiB,GAEjB8D,GAAsB,GAEpBC,GAAOf,EAAUe,KACjBC,GAAWhB,EAAUgB,SAMrBC,IALSjB,EAAUkB,SACrBlB,EAAUkB,QAAQC,SAAS,SACzB,WAEF,WACwBJ,GAAOC,GAa7BI,GAXepD,OAAOG,KAAK6B,EAAUqB,OAAOlK,KAAI,SAACmK,GACrD,IAAMC,EAA0BD,EAAQE,UAAU,GAC5CC,EAAOF,EAAwBG,QAAQ,KAEzCC,EAAcJ,EAGlB,OAFIE,EAAO,IAAGE,EAAcJ,EAAwBC,UAAU,EAAGC,IAE1DnJ,EAAWqJ,MAIUC,QAC5B,SAAC7J,EAAO0F,EAAOoE,GAAf,OAAyBA,EAAMH,QAAQ3J,KAAW0F,KAG9CH,GAAiB8D,GAASnB,GAE1B6B,GAAc9B,EAAU8B,YACxBC,GAA2BD,GAAYxE,IAG7C,GAAIyE,GAA0B,CAC5B,IAAMC,GAAaD,GAAyBC,WAC5CjF,GAAeiB,OAAOG,KAAK6D,IAI7B,IAGMC,GAHYjE,OAAOC,QAAQ+B,EAAUqB,OAGDO,QAAO,SAACM,GAAD,OAC/CA,EAAG,GAAGC,WAAW,IAAM7E,GAAe9C,kBAIlC4H,GAAgCH,GAAwBL,QAAO,SAACM,GAAD,OACnElE,OAAOG,KAAK+D,EAAG,IAAIf,SAAS,UAIxBkB,GAAiCJ,GAAwBL,QAAO,SAACM,GAAD,OACpElE,OAAOG,KAAK+D,EAAG,IAAIf,SAAS,WAGxB/D,GAAiB6E,GAAwBL,QAAO,SAACM,GAAD,OACpDlE,OAAOG,KAAK+D,EAAG,IAAIf,SAAS,UAGxB9D,GAAoB4E,GAAwBL,QAChD,SAACM,GAAD,OAAQlE,OAAOG,KAAK+D,EAAG,IAAIf,SAAS,aACpC,GAEFiB,IACEA,GAA8BE,SAAQ,SAACJ,GAGrC,GACElC,EAAUqB,MAAMa,EAAG,IAAIK,IAAIC,WAC3BxC,EAAUqB,MAAMa,EAAG,IAAIK,IAAIC,UAAU,MACrCxC,EAAUqB,MAAMa,EAAG,IAAIK,IAAIC,UAAU,KAAKC,QAC1CzC,EAAUqB,MAAMa,EAAG,IAAIK,IAAIC,UAAU,KAAKC,OAAOC,KACjD,CACA,IAAMC,EAAiB3C,EAAUqB,MAC/Ba,EAAG,IACHK,IAAIC,UAAU,KAAKC,OAAOC,KAAKE,QAAQ,iBAAkB,IAC3D7F,GAAeiB,OAAOG,KAAK2D,GAAYa,GAAgBX,gBAK7D,IAAMa,GAA+B,SACnCC,GAGI,IAFJC,EAEG,uDAFa,GAChBC,EACG,uDADM,OAET,IAAKF,EAGH,OAFAG,QAAQC,IAAI,2BACZrD,IAGFW,GAAmB,GACnB,IAAI2C,EAAwB,GAC5B,GAAInF,OAAOG,KAAK2E,EAAW,GAAGE,GAAQI,WAAW,IAAIjC,SAAS,UAAW,CACvE,IAkBIkC,EACAC,EARE7I,GARJuD,OAAOG,KAAK2E,EAAW,GAAGE,GAAQI,WAAW,GAAGX,QAAQtB,SACtD,SAGa2B,EAAW,GAAGE,GAAQI,WAAW,GAAGX,OAAOc,MAAMb,KAEjDI,EAAW,GAAGE,GAAQI,WAAW,GAAGX,OAAOC,MAGzDE,QAAQ,gBAAiB,IACzBA,QAAQ,IAAK,IAEVY,EAAUxD,EAAU8B,YAAYrH,GAChCgJ,EAAgBzF,OAAOG,KAAKqF,EAAQxB,YAI1CmB,EAAqB,sBAChBA,GADgB,CAEnBM,EAActM,KAAI,SAACuM,EAAOjC,GACxB,OAAQ+B,EAAQxB,WAAW0B,GAAO7L,MAChC,IAAK,QACC2L,EAAQxB,WAAW0B,GAAOH,MAAM1L,KAClCwL,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAC2C,YAAzC2L,EAAQxB,WAAW0B,GAAOH,MAAM1L,KAC5B,SACA,OAENF,KAAM+L,EAAQ,MACd5L,YAAa,2BACb2C,IAAK6F,EAAS,CACZqD,SAAU,aAEZnK,aAAcuJ,EAAcW,MAIhCJ,EAAUE,EAAQxB,WAAW0B,GAAOH,MAAMb,KACvCE,QAAQ,gBAAiB,IACzBA,QAAQ,IAAK,IAChBS,EACE,kBAACnK,EAAA,EAAKC,MAAN,CACE5B,IAAKmM,EACLnK,GAAIqK,IACJxK,UAAS,UAAKsK,EAAL,YAAcjC,GACvBhH,IAAK6F,EAAS,CACZqD,SAAU,aAEZhM,KAAM+L,GAEL1F,OAAOG,KAAK6B,EAAU8B,YAAYwB,GAAStB,YAAY7K,KACtD,SAAC0M,GACC,OACE,kBAAC3K,EAAA,EAAKI,QAAN,CACE/B,IAAG,UAAKsM,EAAL,YAAiBpC,GACpB5J,KAGa,YAFXmI,EAAU8B,YAAYwB,GAAStB,WAC7B6B,GACAhM,KACE,SACA,OAENF,KAAM,CAAC+L,EAAQ,MAAQG,GACvB/L,YACEQ,EAAWoL,GAAS,IAAMpL,EAAWuL,GAEvCpJ,IAAK6F,EAAS,CACZqD,SAAU,aAGZnK,aACEwE,OAAOG,KAAK4E,GAAe5K,OAAS,GAChC4K,EAAcW,GAAO,GACnBX,EAAcW,GAAO,GAAGG,GAE1B,YASpB,MAGF,IAAK,SAGCL,EAAQxB,WAAW0B,GAAOI,MAC5BT,EAAiB,GACjBG,EAAQxB,WAAW0B,GAAOI,KAAKxB,SAAQ,SAACyB,GACtCV,EAAc,sBACTA,GADS,CAEZ,4BAAQ9L,IAAKwM,EAAMpM,KAAMoM,GACtBA,SAKPV,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAK,OACLF,KAAM+L,EACN5L,YAAa,gBAAkBQ,EAAWoL,GAC1CjJ,IAAK6F,EAAS,CACZqD,SAAU,aAEZnK,aAAcuJ,EAAcW,KAKlC,MACF,IAAK,UACHL,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAK,SACLF,KAAM+L,EACN5L,YAAa,gBAAkBQ,EAAWoL,GAC1ClK,aAAcuJ,EAAcW,GAC5BjJ,IAAK6F,EAAS,CACZqD,SAAU,eAIhB,MACF,IAAK,OACHN,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAK,OACLF,KAAM+L,EACN5L,YAAa,gBAAkBQ,EAAWoL,GAC1CjJ,IAAK6F,EAAS,CACZqD,SAAU,eAIhB,MACF,IAAK,UACHN,EAAiB,CACf,4BAAQ9L,IAAG,UAAKmM,EAAL,UAAoB3L,MAAOiM,SAAQ,IAA9C,SAGA,4BAAQzM,IAAG,UAAKmM,EAAL,SAAmB3L,MAAOiM,SAAQ,IAA7C,SAIF,MAEF,QACE,IAAIC,EACJ,GAAIT,EAAQxB,WAAW0B,GAAnB,KAAmC,CACrC,IAAMJ,EAAUE,EAAQxB,WAAW0B,GAAOhB,KACvCE,QAAQ,gBAAiB,IACzBA,QAAQ,IAAK,IAChBqB,EAAiBjE,EAAU8B,YAAYwB,GAGvCD,EACE,kBAACnK,EAAA,EAAKC,MAAN,CACE5B,IAAKmM,EACLnK,GAAIqK,IACJxK,UAAS,UAAKsK,EAAL,YAAcjC,GACvBhH,IAAK6F,EAAS,CACZqD,SAAU,aAEZhM,KAAM+L,GAEL1F,OAAOG,KAAK8F,EAAejC,YAAY7K,KAAI,SAAC0M,GAC3C,OACE,kBAAC3K,EAAA,EAAKI,QAAN,CACE/B,IAAG,UAAKsM,EAAL,YAAiBpC,GACpB5J,KAEE,WADAoM,EAAejC,WAAW6B,GAAUhM,KAEhC,OACA,SAENF,KAAM+L,EAAQ,IAAMG,EACpB/L,YACEQ,EAAWoL,GAAS,IAAMpL,EAAWuL,GAEvCpJ,IAAK6F,EAAS,CACZqD,SAAU,aAGZnK,aACEwE,OAAOG,KAAK4E,GAAe5K,OAAS,GAChC4K,EAAcW,GACZX,EAAcW,GAAOG,GAEvB,gBAShBR,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAK,OACLF,KAAM+L,EACN5L,YAAa,gBAAkBQ,EAAWoL,GAC1CjJ,IAAK6F,EAAS,CACZqD,SAAU,eAMtB,OACE,kBAACzK,EAAA,EAAKC,MAAN,CACE5B,IAAG,UAAKmM,EAAL,YAAcjC,GACjBlI,GAAI2K,IACJ9K,UAAS,UAAKsK,EAAL,YAAcjC,IAEvB,kBAACmC,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,SAAa7L,EAAWoL,KAE1B,kBAACE,EAAA,EAAD,KACG/K,MAAMC,QAAQuK,GACb,kBAACnK,EAAA,EAAKI,QAAN,CACEC,GAAG,SACH5B,KAAM+L,EACNjJ,IAAK6F,EAAS,CACZqD,SAAU,aAEZnK,aAAcuJ,EAAcW,IAE3BL,GAGHA,SAOZjD,EAAe+C,QAEfA,EAAqB,sBAChBA,GADgB,CAEnBL,EAAW,GAAGE,GAAQI,WAAWjM,KAAI,SAACuM,EAAOjC,GAC3C,IAAI4B,EACJ,OAAQK,EAAM7L,MACZ,IAAK,QACHwL,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAqB,WAAf6L,EAAM7L,KAAoB,OAAS,SACzCF,KAAM+L,EAAM/L,KAAO,MACnBG,YAAa,2BACb2C,IAAK6F,EAAS,CACZqD,SAAU,eAIhB,MACF,IAAK,SACHN,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAK,OACLF,KAAM+L,EAAM/L,KACZG,YAAa,gBAAkBQ,EAAWoL,EAAM/L,MAChD8C,IAAK6F,EAAS,CACZqD,SAAU,eAIhB,MACF,IAAK,UACHN,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAK,SACLF,KAAM+L,EAAM/L,KACZG,YAAa,gBAAkBQ,EAAWoL,EAAM/L,MAChD8C,IAAK6F,EAAS,CACZqD,SAAU,eAIhB,MACF,IAAK,OACHN,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAK,OACLF,KAAM+L,EAAM/L,KACZG,YAAa,gBAAkBQ,EAAWoL,EAAM/L,MAChD8C,IAAK6F,EAAS,CACZqD,SAAU,eAIhB,MACF,QACEN,EACE,kBAACnK,EAAA,EAAKI,QAAN,CACEzB,KAAK,OACLF,KAAM+L,EAAM/L,KAAO,IAAM+L,EAAM/L,KAC/BG,YAAa,gBAAkBQ,EAAWoL,EAAM/L,MAChD8C,IAAK6F,EAAS,CACZqD,SAAU,eAMpB,OACE,kBAACzK,EAAA,EAAKC,MAAN,CACE5B,IAAG,UAAKmM,EAAM/L,KAAX,YAAmB8J,GACtBlI,GAAI2K,IACJ9K,UAAS,UAAKsK,EAAM/L,KAAX,YAAmB8J,IAE5B,kBAACmC,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,SAAa7L,EAAWoL,EAAM/L,QAEhC,kBAACiM,EAAA,EAAD,KAAMP,SAKdjD,EAAe+C,IAabiB,GAAsB,SAAC3G,GAC3B,IAAM4G,EAAMrH,GAAeS,GACrB6G,EAAatG,OAAOG,KAAKkG,GAAK,GAC9BE,EAAUlH,GAAkB,GAC5BmH,EAAUH,EAAIC,GACdG,EAAaF,EAAQ7C,QAAQ,KAC7BgD,EAAWH,EAAQ7C,QAAQ,KAC3BiD,EAAiBJ,EAAQ/C,UAAUiD,EAAa,EAAGC,GAEzDjE,GAAyB,GAEzB,IAAMmE,EAAgBL,EAAQ3B,QAAQ,IAAM+B,EAAiB,IAAKH,GAClEpF,EAAQ,GAAD,OAAI6B,IAAJ,OAAiB2D,GAAiB,CAAE5B,OAAQ,WAAY6B,MAAK,WD/dtC/E,IAAMgF,KAAK,wBCmevC1F,EAAQ,MAGR,IACIrF,EADAgL,EAAiB,YAAOjI,GAE5B,IAAK/C,EAAI,EAAGA,EAAIgL,EAAkB5M,OAAQ4B,IACxCgL,EAAkBhL,GAAlB,2BACKgL,EAAkBhL,IADvB,IAEEhC,MAAO,KAIXoI,EAAkB4E,OAuHtB3C,GAA8BE,SAAQ,SAACJ,GACfA,EAAG,GAAGK,IAAIa,WAClBd,SAAQ,SAAC0C,GACrB,OAAQA,EAASnN,MACf,IAAK,UACHiJ,GAAmB,sBACdA,IADc,CAEjB,CACEnJ,KAAMqN,EAASrN,KACfE,KAAM,SACNE,MAAO,MAGX,MAEF,IAAK,QACH,IAAMkB,EAAU+L,EAASzB,MAAMO,KAAOkB,EAASzB,MAAMO,KAAO,GAC5DhD,GAAmB,sBACdA,IADc,CAEjB,CACEnJ,KAAMqN,EAASrN,KACfE,KAAM,QACNoB,UACAlB,MAAO,MAGX,MAEF,QACE+I,GAAmB,sBACdA,IADc,CAEjB,CACEnJ,KAAMqN,EAASrN,KACfI,MAAO,aAQnB,IAAIkF,GAA0B,GAQ9B,GANAoF,GAA+BC,SAAQ,SAACJ,GACtC,IAAM+C,EAAc,CAAEtH,KAAMuE,EAAG,GAAIxE,UAAWwE,EAAG,GAAGgD,KAAKC,aACzDlI,GAAuB,sBAAOA,IAAP,CAAgCgI,OAIrDrI,EACF,OAAQjE,EAAciE,IACpB,IAAK,QACHI,GAAeoI,KAAf,MAAApI,GAAc,YAASJ,IACvB,MAEF,IAAK,SACHI,GAAeoI,KAAKxI,GACpB,MAEF,QACE,MAAM,IAAIyI,MAAM,2BAKtBC,IAAM1F,WACJ,kBAAMO,EAAkBW,MAExB,CAACyE,KAAKC,UAAU1E,MAGlB,IAAMhF,GAAW,CACfgB,iBACAC,gBACAC,kBACAC,2BACAC,cACAC,UAGIlB,GAAoB,CACxBmB,kBACAC,sBAGF,OACE,kBAAC,EAAD,CACEzB,QAASoE,EAAU8E,KACnBpO,UAAW0K,GACXvF,sBAAuBoE,EACvBnE,SAAUA,GACVG,kBAAmBA,GACnBF,cAAe,CAAEa,OAAM5E,QAAO6E,WAC9Bb,gBA/IsB,SAAC3B,GAAO,IAO5BN,EAP2B,EACPM,EAAEH,OAAlBvC,EADuB,EACvBA,KAAMI,EADiB,EACjBA,MAER0N,EAAoB3I,EAAe4I,WAAU,SAACC,GAAD,OAAOA,EAAEhO,OAASA,KACjEoN,EAAiB,YAAOjI,GAI5B,IAAK/C,EAAI,EAAGA,EAAIgL,EAAkB5M,OAAQ4B,IACpCA,IAAM0L,EACRV,EAAkBU,GAAlB,2BACKV,EAAkBU,IADvB,IAEE1N,UAGFgN,EAAkBhL,GAAlB,2BACKgL,EAAkBhL,IADvB,IAEEhC,MAAO,KAOb,GAFAoI,EAAkB4E,GAEbhN,EAAL,CAKA,IAAM6N,EAAWxD,GAA8BqD,GAE/C,OAAQG,EAAS,GAAGrD,IAAIa,WAAW,GAAGyC,IACpC,IAAK,QACHzG,EAAQ,GAAD,OAAI6B,IAAJ,OAAiB2E,EAAS,GAA1B,YAAgCjO,EAAhC,YAAwCI,IAC/C,MACF,IAAK,OACH,IAAM+N,EAAeF,EAAS,GAAGrD,IAAIa,WAAW,GAAGzL,KAC7CoO,EAASH,EAAS,GACrBhD,QAAQkD,EAAc/N,GACtB6K,QAAQ,IAAK,IACbA,QAAQ,IAAK,IAChBxD,EAAQ,GAAD,OAAI6B,IAAJ,OAAiB8E,UAhB1B3G,EAAQ,OAuHRlD,gBArJwB,SAACuB,GAC3ByC,EAA2BzC,GAC3B2B,EAAQ,OAoJNjD,oBA7J4B,SAAC6J,EAAerI,GAC9C,IAAMmF,EAAaT,GAA+B2D,GAClDnF,GAAwBlD,GACxBkF,GAA6BC,IA2J3B1G,SAAUmE,GAnNc,SAAC3D,GAC3B,IAAIqJ,EAASrF,GAAqBY,UAAU,GAC5C,GAAIyE,EAAO9E,SAAS,MAAQ8E,EAAO9E,SAAS,KAAM,CAChD,IAAMsD,EAAawB,EAAOvE,QAAQ,KAAO,EACnCgD,EAAWuB,EAAOvE,QAAQ,KAC1BwE,EAAgBD,EAAOzE,UAAUiD,EAAYC,GACnDuB,EAASA,EACNrD,QAAQ,IAAK,IACbA,QAAQ,IAAK,IACbA,QAAQsD,EAAetJ,EAAKsJ,IAGjC,IAAMC,EAAuB9D,GAA+BqD,WAC1D,SAAC/H,GAAD,OAAUA,EAAK,KAAOiD,MAKpBwF,EAAc,GACdC,EAAU,GAEd,OALiBhE,GAA+B8D,GAK/B,GAAGjB,KAAKoB,SAAS,IAChC,IAAK,oCACHF,EAAc,oCAEd,IAAMG,EAAS,GACfvI,OAAOG,KAAKvB,GAAM0F,SAAQ,SAACkE,GACzB,IAAIC,EAAaC,mBAAmBF,GAChCG,EAAeD,mBAAmB9J,EAAK4J,IAC3CD,EAAOnB,KAAKqB,EAAa,IAAME,MAGjCN,EAAUE,EAAOrI,KAAK,KACtB,MAEF,QACEkI,EAAc,mBACdC,EAAUd,KAAKC,UAAU5I,GAG7BwC,EAAQ,GAAD,OAAI6B,GAAJ,YAAkBgF,EAAOzL,eAAiB,CAC/CwI,OAAQ,OACR4D,QAAS,CACPC,OAAQ,mBACR,eAAgBT,GAElBU,KAAMT,IACLxB,MAAK,WACNrE,GAAmB,SAACuG,GAAD,OAAgBA,KDriBPjH,IAAMgF,KAAK,gCCysBvCzI,cA7PsB,SAACoB,GAEzB,IAAM4G,EAAMrH,GAAeS,GAErBqF,EAAa1F,GAAe,GAElCyF,GAA6BC,EAAYuB,EAAK,QAwP5C/H,gBAAiB,SAAC0K,GAChBrG,EAAkBqG,GAClBvG,GAAyB,IAE3B/D,2BAA4B,kBAC1B+D,GAAyB,SAACsG,GAAD,OAAgBA,MAE3CpK,sBAAuBA,EACvBF,kBAAmB,kBAAM2H,GAAoB1D,IAC7CnE,oBAAqB,kBAAMiE,GAAmB,SAACuG,GAAD,OAAgBA,MAC9DvK,gBAAiBA,KChsBRyK,EAfI,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACHpI,EAASoI,GADN,sBAC7BtK,EAD6B,EAC7BA,KAAMC,EADuB,EACvBA,QAAS7E,EADc,EACdA,MACxB,OAAO6E,EACL,2CACE7E,EACF,8CAAoBA,GAEpB4E,GAAQ,kBAAC,EAAD,CAAkBoD,UAAWpD,K,wBC8B1BvB,EAxCA,SAAC,GAMT,IALLN,EAKI,EALJA,MACAnD,EAII,EAJJA,MACAuP,EAGI,EAHJA,iBACAC,EAEI,EAFJA,aACAC,EACI,EADJA,oBAEA,OACE,yBAAKnQ,UAAU,cACb,yBAAKA,UAAU,aACb,4BAAK6D,GACL,kBAAC7B,EAAA,EAAD,CAAMhC,UAAU,cAAckF,SAAUgL,GACtC,2BAAOhP,QAAQ,WAAWR,GAC1B,kBAAC0P,EAAA,EAAD,CAAYlJ,MAAO,CAAEmJ,MAAO,QAC1B,kBAACC,EAAA,EAAD,CACER,GAAG,gBACHrP,KAAK,UACLT,UAAU,OACVY,YAAY,uDACZC,MAAOoP,EACPlP,SAAUoP,KAGd,kBAAC3L,EAAA,EAAD,CAAQ7D,KAAK,SAASX,UAAU,QAAhC,cCKKuQ,G,MA5BH,WAAO,IAAD,EAC2BzI,mBACzC,+CAFc,mBACT0I,EADS,KACOC,EADP,OAKoB3I,mBAAS0I,GAL7B,mBAKTE,EALS,KAKGC,EALH,KAYhB,OACE,yBAAK3Q,UAAU,OACb,kBAAC,EAAD,CACE6D,MAAM,aACNnD,MAAM,0BACNuP,iBAAkBO,EAClBL,oBAAqB,SAAChN,GAAD,OAAOsN,EAAiBtN,EAAEH,OAAOnC,QACtDqP,aAZmB,SAAC/M,GACxBA,EAAEyN,iBACFD,EAAcH,MAYZ,yBAAKxQ,UAAU,mCACb,kBAAC,EAAD,CAAYgQ,YAAaU,Q,YClBjCG,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,W","file":"static/js/main.0252be2a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\n\r\nconst NavBar = ({ menuItems, selectedIndex, onItemClick }) => {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Nav activeKey={menuItems[selectedIndex]} className=\"mr-auto\">\r\n        {menuItems.map((menuItem, idx) => (\r\n          <Nav.Link\r\n            key={menuItem}\r\n            eventKey={menuItem}\r\n            onClick={() => onItemClick(idx)}\r\n          >\r\n            {menuItem}\r\n          </Nav.Link>\r\n        ))}\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nNavBar.propTypes = {\r\n  menuItems: PropTypes.array.isRequired,\r\n  selectedIndex: PropTypes.number,\r\n  onItemClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TextField = ({\r\n  name,\r\n  label,\r\n  type,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  onChange,\r\n}) => {\r\n  let wrapperClass = \"form-group\";\r\n  if (error && error.length > 0) {\r\n    wrapperClass += ` has-error`;\r\n  }\r\n\r\n  return (\r\n    <div className={wrapperClass}>\r\n      <label htmlFor={name}>{label}</label>\r\n      <div className=\"field\">\r\n        <input\r\n          type={type}\r\n          name={name}\r\n          className=\"form-control\"\r\n          placeholder={placeholder}\r\n          value={value}\r\n          onChange={onChange}\r\n        />\r\n        {error && <div className=\"alert alert-danger\">{error}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nTextField.defaultProps = {\r\n  type: \"text\",\r\n};\r\n\r\nTextField.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  type: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  value: PropTypes.string,\r\n  error: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TextField;\r\n","export const capitalize = (string) =>\r\n  string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\nexport const getObjectType = (object) =>\r\n  Array.isArray(object) ? \"array\" : typeof object;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { capitalize } from \"../../utils\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nconst DropDownField = ({\r\n  name,\r\n  label,\r\n  onChange,\r\n  defaultOption,\r\n  value,\r\n  error,\r\n  options,\r\n}) => {\r\n  return (\r\n    <Form.Group controlId={name}>\r\n      <Form.Label>{label}</Form.Label>\r\n      <Form.Control\r\n        as=\"select\"\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        defaultValue={defaultOption}\r\n      >\r\n        <option value=\"\">-- Select {label} --</option>\r\n        {options.map((option) => {\r\n          return (\r\n            <option key={option} value={option}>\r\n              {capitalize(option)}\r\n            </option>\r\n          );\r\n        })}\r\n\r\n        {\r\n          //TODO: taost an error\r\n          error && <div className=\"alert alert-danger\">{error}</div>\r\n        }\r\n      </Form.Control>\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nDropDownField.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  defaultOption: PropTypes.string,\r\n  value: PropTypes.string,\r\n  error: PropTypes.string,\r\n  options: PropTypes.array,\r\n};\r\n\r\nexport default DropDownField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./InputTag.css\";\r\n\r\nconst InputTag = ({ label, name, placeHolder, value, onChange }) => {\r\n  const tags = value;\r\n  let tagInput = null;\r\n\r\n  const removeTag = (i) => {\r\n    let newTags = [...tags];\r\n    newTags.splice(i, 1);\r\n\r\n    onChange({ target: { value: newTags.length > 0 ? [newTags] : [], name } });\r\n  };\r\n\r\n  const inputKeyDown = (e) => {\r\n    const val = e.target.value;\r\n    if (e.key === \"Enter\" && val) {\r\n      if (tags.find((tag) => tag?.toLowerCase() === val?.toLowerCase())) {\r\n        return;\r\n      }\r\n      tagInput.value = null;\r\n      onChange({ target: { value: [...tags, val], name } });\r\n    } else if (e.key === \"Backspace\" && !val) {\r\n      removeTag(tags.length - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={\"form-group\"}>\r\n      <label htmlFor={name}>{label}</label>\r\n      <div className=\"input-tag\">\r\n        <ul name={name} className=\"input-tag__tags\">\r\n          {tags.map((tag, i) => (\r\n            <li key={tag}>\r\n              {tag}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  removeTag(i);\r\n                }}\r\n              >\r\n                +\r\n              </button>\r\n            </li>\r\n          ))}\r\n          <li className=\"input-tag__tags__input\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder={placeHolder}\r\n              onKeyDown={inputKeyDown}\r\n              ref={(c) => {\r\n                tagInput = c;\r\n              }}\r\n            />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nInputTag.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  placeHolder: PropTypes.string,\r\n  value: PropTypes.array.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default InputTag;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\nconst PopupDialog = ({\r\n  open,\r\n  onClose,\r\n  onSaveClicked,\r\n  title,\r\n  buttonName,\r\n  children,\r\n}) => (\r\n  <Modal show={open} onHide={onClose}>\r\n    <Modal.Header closeButton>\r\n      <Modal.Title>{title}</Modal.Title>\r\n    </Modal.Header>\r\n    <Modal.Body>{children}</Modal.Body>\r\n    <Modal.Footer>\r\n      <Button variant=\"secondary\" onClick={onClose}>\r\n        Close\r\n      </Button>\r\n      <Button onClick={onSaveClicked}>\r\n        {buttonName ? buttonName : \"Save Changes\"}\r\n      </Button>\r\n    </Modal.Footer>\r\n  </Modal>\r\n);\r\n\r\nPopupDialog.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSaveClicked: PropTypes.func.isRequired,\r\n  title: PropTypes.string,\r\n  buttonName: PropTypes.string,\r\n  children: PropTypes.object,\r\n};\r\n\r\nexport default PopupDialog;\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Form, Table, Badge } from \"react-bootstrap\";\r\n\r\nimport NavBar from \"./shared/NavBar\";\r\nimport TextField from \"./shared/TextField\";\r\nimport DropDownField from \"./shared/DropDownField\";\r\nimport InputTag from \"./shared/InputTag\";\r\nimport PopupDialog from \"./shared/PopupDialog\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport { capitalize, getObjectType } from \"../utils\";\r\n\r\nimport \"./GenerateView.css\";\r\n\r\nconst GenerateView = ({\r\n  appInfo,\r\n  menuItems,\r\n  selectedMenuItemIndex,\r\n  uiObject,\r\n  fetchResponse,\r\n  onUiInputChange,\r\n  editDeleteButtons,\r\n  onMenuItemClick,\r\n  onPostOptionClicked,\r\n  onSubmit,\r\n  onEditClicked,\r\n  onDeleteClicked,\r\n  onTogglePopupDialog,\r\n  openPopupDialog,\r\n  onDeleteConfirmed,\r\n  closeOpenDeletePopUpDialog,\r\n  openDeletePopupDialog,\r\n}) => {\r\n  const { data, loading, error } = fetchResponse;\r\n  const {\r\n    displayFilters,\r\n    tableColumns,\r\n    tableDataArray,\r\n    displayPostOptionsArray,\r\n    formInModal,\r\n    errors,\r\n  } = uiObject;\r\n\r\n  const { isPutInService, isDeleteInService } = editDeleteButtons;\r\n  const currentService = menuItems[selectedMenuItemIndex];\r\n\r\n  const displayPostButtons = displayPostOptionsArray?.map((opt, index) => (\r\n    <Button\r\n      key={opt.operation}\r\n      onClick={() => onPostOptionClicked(index, opt.path)}\r\n    >\r\n      {capitalize(opt.operation)}\r\n    </Button>\r\n  ));\r\n  const displayFiltersInputs = displayFilters?.map((f, index) => {\r\n    const name = f.name;\r\n    const type = f.type ? f.type : \"text\";\r\n    const options = f.options ? f.options : [];\r\n    const value = f.value;\r\n\r\n    if (type === \"array\") {\r\n      if (options.length === 0) {\r\n        return (\r\n          <InputTag\r\n            key={`${name}_${index}`}\r\n            label={capitalize(name)}\r\n            name={name}\r\n            placeHolder={\"Add \" + capitalize(name)}\r\n            value={value ? value : []}\r\n            onChange={(e) => onUiInputChange(e)}\r\n          />\r\n        );\r\n      }\r\n      return (\r\n        <div key={`${name}_${index}`} className=\"col\">\r\n          <DropDownField\r\n            name={name}\r\n            label={capitalize(name)}\r\n            options={options}\r\n            value={value}\r\n            onChange={(e) => onUiInputChange(e)}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div key={`${name}_${index}`} className=\"col\">\r\n          <TextField\r\n            name={name}\r\n            label={capitalize(name)}\r\n            type={type}\r\n            value={value}\r\n            onChange={(e) => onUiInputChange(e)}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  });\r\n\r\n  const tableData = tableDataArray?.map((r, idx) => (\r\n    <Fragment key={idx}>\r\n      <tr>\r\n        {tableColumns?.map((c) => {\r\n          switch (getObjectType(r[c])) {\r\n            case \"object\":\r\n              return <td key={`${c}_${idx}`}>{Object.entries(r[c]).join()}</td>;\r\n\r\n            case \"array\":\r\n              if (getObjectType(r[c][0]) === \"object\") {\r\n                return (\r\n                  <td key={`${c}_${idx}`}>{Object.entries(r[c][0]).join()}</td>\r\n                );\r\n              }\r\n              return <td key={`${c}_${idx}`}>{r[c].join()}</td>;\r\n\r\n            default:\r\n              return <td key={`${c}_${idx}`}>{r[c]}</td>;\r\n          }\r\n        })}\r\n        <td className=\"actions-buttons-wrapper\">\r\n          {isPutInService.length > 0 ? (\r\n            <Button variant=\"warning\" onClick={() => onEditClicked(idx)}>\r\n              Edit\r\n            </Button>\r\n          ) : null}\r\n          {isDeleteInService.length > 0 ? (\r\n            <Button variant=\"danger\" onClick={() => onDeleteClicked(idx)}>\r\n              Delete\r\n            </Button>\r\n          ) : null}\r\n        </td>\r\n      </tr>\r\n    </Fragment>\r\n  ));\r\n  return (\r\n    <Fragment>\r\n      <PopupDialog\r\n        open={openPopupDialog}\r\n        onClose={onTogglePopupDialog}\r\n        onSaveClicked={onSubmit}\r\n        title={currentService}\r\n      >\r\n        <Form>\r\n          {formInModal}\r\n          {errors && Object.keys(errors).length > 0 && (\r\n            <>\r\n              <p style={{ color: \"red\" }}>The following fields are required:</p>\r\n              <ul>\r\n                {Object.keys(errors).map((e) => (\r\n                  <li key={e} style={{ color: \"red\" }}>\r\n                    {capitalize(e)}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </>\r\n          )}\r\n        </Form>\r\n      </PopupDialog>\r\n      <PopupDialog\r\n        open={openDeletePopupDialog}\r\n        onClose={closeOpenDeletePopUpDialog}\r\n        onSaveClicked={onDeleteConfirmed}\r\n        title={\"Delete\"}\r\n        buttonName={\"Delete\"}\r\n      >\r\n        <Form>{\"Are you sure you want to delete this item?\"}</Form>\r\n      </PopupDialog>\r\n      <ToastContainer autoClose={3000} />\r\n      <div className=\"generated-app-header\">\r\n        <h3>{appInfo.title}</h3>\r\n        <p>Version {appInfo.version}</p>\r\n      </div>\r\n      <NavBar\r\n        menuItems={menuItems}\r\n        selectedIndex={selectedMenuItemIndex}\r\n        onItemClick={(selectedIndex) => onMenuItemClick(selectedIndex)}\r\n      />\r\n      <div className=\"container p-4\">\r\n        <div className=\"post-buttons-wrapper\">{displayPostButtons}</div>\r\n\r\n        <Form className=\"row\">{displayFiltersInputs}</Form>\r\n        {loading ? (\r\n          <div>Loading...</div>\r\n        ) : error ? (\r\n          <div>Error: {error}</div>\r\n        ) : tableData && tableData.length > 0 ? (\r\n          <Fragment>\r\n            <br />\r\n            <h4>\r\n              {currentService} <Badge variant=\"secondary\">{data.length}</Badge>\r\n            </h4>\r\n            <Table striped bordered hover variant=\"dark\">\r\n              <thead>\r\n                <tr>\r\n                  {tableColumns.map((column) => (\r\n                    <th key={column}>{capitalize(column)}</th>\r\n                  ))}\r\n                  <th key=\"action\">Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{tableData}</tbody>\r\n            </Table>\r\n          </Fragment>\r\n        ) : (\r\n          <p>\r\n            <i>No records to show</i>\r\n          </p>\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nGenerateView.propTypes = {\r\n  appInfo: PropTypes.object.isRequired,\r\n  menuItems: PropTypes.array.isRequired,\r\n  selectedMenuItemIndex: PropTypes.number.isRequired,\r\n  openPopupDialog: PropTypes.bool.isRequired,\r\n  openDeletePopupDialog: PropTypes.bool.isRequired,\r\n  uiObject: PropTypes.object.isRequired,\r\n  editDeleteButtons: PropTypes.object.isRequired,\r\n  fetchResponse: PropTypes.object.isRequired,\r\n  onUiInputChange: PropTypes.func.isRequired,\r\n  onMenuItemClick: PropTypes.func.isRequired,\r\n  onPostOptionClicked: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onEditClicked: PropTypes.func.isRequired,\r\n  onDeleteClicked: PropTypes.func.isRequired,\r\n  onTogglePopupDialog: PropTypes.func.isRequired,\r\n  closeOpenDeletePopUpDialog: PropTypes.func.isRequired,\r\n  onDeleteConfirmed: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default GenerateView;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const callApi = async (url, options) => {\r\n    if (!url) {\r\n      setError(null);\r\n      setData(null);\r\n      setLoading(false);\r\n\r\n      return;\r\n    }\r\n    setLoading(true);\r\n\r\n    // DEBUG CODE\r\n    //await new Promise((t) => setTimeout(t, 3000));\r\n\r\n    try {\r\n      const res = await fetch(url, options);\r\n      if (res.status !== 200) {\r\n        let msg = `${res.message} [${res.status}]`;\r\n        switch (res.status) {\r\n          case 404:\r\n            msg = \"Not Found\";\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        setError(msg);\r\n      } else {\r\n        const json = await res.json();\r\n        setError(null);\r\n        setData(json);\r\n      }\r\n    } catch (e) {\r\n      setError(e.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (url) callApi(url);\r\n  }, [url]);\r\n  return [{ data, error, loading }, callApi];\r\n};\r\n","import { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport const notifySubmit = () => toast.info(\"Submitted Sucssefully!\");\r\nexport const notifyUpdate = () => toast.info(\"Updated Sucssefully!\");\r\nexport const notifyDelete = () => toast.info(\"Deleted Sucssefully!\");\r\nexport const notifyError = () => toast.error(\"Operation has failed!\");\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GenerateView from \"./GenerateView\";\r\nimport { useFetch } from \"../hooks/useFetch\";\r\nimport { capitalize, getObjectType } from \"../utils\";\r\nimport { Form, FormLabel, Row, Col } from \"react-bootstrap\";\r\nimport \"./CreateComponents.css\";\r\nimport { notifySubmit, notifyDelete, notifyError } from \"../toastify\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst CreateComponents = ({ specsJson }) => {\r\n  // the index of the current definition which has seleceted in the tab\r\n  const [selectedDefinitionIndex, setSelectedDefinitionIndex] = useState(0);\r\n  // array of filters options exists in the api\r\n  const [displayFilters, setDisplayFilters] = useState([]);\r\n  // using useFetch hook to get the data from url\r\n  const [{ data, error, loading }, callApi] = useFetch();\r\n  //displays fields in modal due to the option which has clicked to post\r\n  const [formInModal, setFormInModal] = useState();\r\n  // handle forms values using react-hook-form\r\n  const { register, errors, handleSubmit } = useForm();\r\n  // control the Modal to be displayed\r\n  const [openPopupDialog, setOpenPopupDialog] = useState(false);\r\n  // control to popup of the delete confirmation\r\n  const [openDeletePopupDialog, setOpenDeletePopupDialog] = useState(false);\r\n  // save the index of the item to delete\r\n  const [deleteObjectId, setDeleteObjectId] = useState(-1);\r\n  // store the current post action button the user has clicked on\r\n  const [currentActionClicked, setCurrentActionClicked] = useState(\"\");\r\n\r\n  // contain the properties of the displayed definition that will be display as the coloumns of the table\r\n  let tableColumns = [];\r\n  // contain the samples data as the rows of the table\r\n  let tableDataArray = [];\r\n  // contain the data of the filters type (name, type, (option), value etc..)\r\n  let displayFiltersArray = [];\r\n\r\n  const host = specsJson.host;\r\n  const basePath = specsJson.basePath;\r\n  const schema = specsJson.schemes\r\n    ? specsJson.schemes.includes(\"https\")\r\n      ? \"https://\"\r\n      : \"http://\"\r\n    : \"http://\";\r\n  const baseApiUrl = schema + host + basePath;\r\n  // mapping over the paths and slice the first char which is \"/\" and capitalize them\r\n  const services_raw = Object.keys(specsJson.paths).map((service) => {\r\n    const serviceNameWithoutSlash = service.substring(1);\r\n    const indx = serviceNameWithoutSlash.indexOf(\"/\");\r\n\r\n    let serviceName = serviceNameWithoutSlash;\r\n    if (indx > 0) serviceName = serviceNameWithoutSlash.substring(0, indx);\r\n\r\n    return capitalize(serviceName);\r\n  });\r\n\r\n  // array that contains the unique paths which exists in the API\r\n  const services = services_raw.filter(\r\n    (value, index, array) => array.indexOf(value) === index\r\n  );\r\n  // the name of the selected path\r\n  const currentService = services[selectedDefinitionIndex];\r\n  // get definitions if exists\r\n  const definitions = specsJson.definitions;\r\n  const currentServiceDefinition = definitions[currentService];\r\n\r\n  // if definitions exist- appending their name to the table as coloumns\r\n  if (currentServiceDefinition) {\r\n    const properties = currentServiceDefinition.properties;\r\n    tableColumns = Object.keys(properties);\r\n  }\r\n\r\n  // get all endpoints\r\n  const endpoints = Object.entries(specsJson.paths);\r\n\r\n  // gets all endpoints of the current service\r\n  const currentServiceEndpoints = endpoints.filter((ep) =>\r\n    ep[0].startsWith(\"/\" + currentService.toLowerCase())\r\n  );\r\n\r\n  // gets all endpoints with 'get' method\r\n  const serviceEndpointsWithGetOption = currentServiceEndpoints.filter((ep) =>\r\n    Object.keys(ep[1]).includes(\"get\")\r\n  );\r\n\r\n  // gets all endpoints with 'post' method\r\n  const serviceEndpointsWithPostOption = currentServiceEndpoints.filter((ep) =>\r\n    Object.keys(ep[1]).includes(\"post\")\r\n  );\r\n  // true if there is \"put\" methods in the current servuce endpoint (gets all endpoints with 'put' methods if exists)\r\n  const isPutInService = currentServiceEndpoints.filter((ep) =>\r\n    Object.keys(ep[1]).includes(\"put\")\r\n  );\r\n  // true if there is \"delete\" methods in the current service endpoint (gets all endpoints with 'delete' methods if exists)\r\n  const isDeleteInService = currentServiceEndpoints.filter(\r\n    (ep) => Object.keys(ep[1]).includes(\"delete\") // Assuming that each service has only oine \"delete\" method\r\n  )[0];\r\n\r\n  serviceEndpointsWithGetOption &&\r\n    serviceEndpointsWithGetOption.forEach((ep) => {\r\n      //TODO: improve this 'if'\r\n      // this if is to handle the case of the definitions of the endpoint is in a $ref of a service\r\n      if (\r\n        specsJson.paths[ep[0]].get.responses &&\r\n        specsJson.paths[ep[0]].get.responses[200] &&\r\n        specsJson.paths[ep[0]].get.responses[200].schema &&\r\n        specsJson.paths[ep[0]].get.responses[200].schema.$ref\r\n      ) {\r\n        const refOfDefintion = specsJson.paths[\r\n          ep[0]\r\n        ].get.responses[200].schema.$ref.replace(\"#/definitions/\", \"\");\r\n        tableColumns = Object.keys(definitions[refOfDefintion].properties);\r\n      }\r\n    });\r\n\r\n  // this function analyzing each field type to dispaly in UI\r\n  const extractFieldsFromDefinitions = (\r\n    optionData,\r\n    initialValues = {},\r\n    method = \"post\" //default method\r\n  ) => {\r\n    if (!optionData) {\r\n      console.log(\"optionData is null\");\r\n      notifyError();\r\n      return;\r\n    }\r\n    setOpenPopupDialog(true); // open the popup dialog\r\n    let arrayOfFiledsElements = [];\r\n    if (Object.keys(optionData[1][method].parameters[0]).includes(\"schema\")) {\r\n      let refInSwagger;\r\n      // if the body is an array, 'schema' will be placed within \"items\"\r\n      if (\r\n        Object.keys(optionData[1][method].parameters[0].schema).includes(\r\n          \"items\"\r\n        )\r\n      ) {\r\n        refInSwagger = optionData[1][method].parameters[0].schema.items.$ref;\r\n      } else {\r\n        refInSwagger = optionData[1][method].parameters[0].schema.$ref;\r\n      }\r\n      const ref = refInSwagger\r\n        .replace(\"#/definitions\", \"\") //TODO: need to fix this hadle with the definition?\r\n        .replace(\"/\", \"\");\r\n\r\n      const fullRef = specsJson.definitions[ref];\r\n      const refProperties = Object.keys(fullRef.properties);\r\n\r\n      let inputUiInModal;\r\n      let tempRef;\r\n      arrayOfFiledsElements = [\r\n        ...arrayOfFiledsElements,\r\n        refProperties.map((field, indx) => {\r\n          switch (fullRef.properties[field].type) {\r\n            case \"array\": {\r\n              if (fullRef.properties[field].items.type) {\r\n                inputUiInModal = (\r\n                  <Form.Control\r\n                    type={\r\n                      fullRef.properties[field].items.type === \"integer\"\r\n                        ? \"number\"\r\n                        : \"text\"\r\n                    } // TODO: another switch\r\n                    name={field + \"[0]\"} // This cast the value to \"array\"\r\n                    placeholder={\"Please separate by comma\"}\r\n                    ref={register({\r\n                      required: \"Required\",\r\n                    })}\r\n                    defaultValue={initialValues[field]}\r\n                  />\r\n                );\r\n              } else {\r\n                tempRef = fullRef.properties[field].items.$ref\r\n                  .replace(\"#/definitions\", \"\")\r\n                  .replace(\"/\", \"\");\r\n                inputUiInModal = (\r\n                  <Form.Group\r\n                    key={field}\r\n                    as={Col}\r\n                    controlId={`${field}_${indx}`}\r\n                    ref={register({\r\n                      required: \"Required\",\r\n                    })}\r\n                    name={field}\r\n                  >\r\n                    {Object.keys(specsJson.definitions[tempRef].properties).map(\r\n                      (subField) => {\r\n                        return (\r\n                          <Form.Control\r\n                            key={`${subField}_${indx}`}\r\n                            type={\r\n                              specsJson.definitions[tempRef].properties[\r\n                                subField\r\n                              ].type === \"integer\"\r\n                                ? \"number\"\r\n                                : \"text\"\r\n                            }\r\n                            name={[field + \"[0]\" + subField]} // This cast the value to object inside an array\r\n                            placeholder={\r\n                              capitalize(field) + \"-\" + capitalize(subField)\r\n                            }\r\n                            ref={register({\r\n                              required: \"Required\",\r\n                            })}\r\n                            // separete between the post and put methods - handle with empty field\r\n                            defaultValue={\r\n                              Object.keys(initialValues).length > 0\r\n                                ? initialValues[field][0]\r\n                                  ? initialValues[field][0][subField]\r\n                                  : null\r\n                                : null\r\n                            }\r\n                          />\r\n                        );\r\n                      }\r\n                    )}\r\n                  </Form.Group>\r\n                );\r\n              }\r\n              break;\r\n            }\r\n\r\n            case \"string\":\r\n              // if there is a list of options:\r\n              //TODO: handle with string, date-time like in store/order endpoint\r\n              if (fullRef.properties[field].enum) {\r\n                inputUiInModal = [];\r\n                fullRef.properties[field].enum.forEach((item) => {\r\n                  inputUiInModal = [\r\n                    ...inputUiInModal,\r\n                    <option key={item} name={item}>\r\n                      {item}\r\n                    </option>,\r\n                  ];\r\n                });\r\n              } else {\r\n                inputUiInModal = (\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name={field}\r\n                    placeholder={\"Please enter \" + capitalize(field)}\r\n                    ref={register({\r\n                      required: \"Required\",\r\n                    })}\r\n                    defaultValue={initialValues[field]}\r\n                  />\r\n                );\r\n              }\r\n\r\n              break;\r\n            case \"integer\":\r\n              inputUiInModal = (\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  name={field}\r\n                  placeholder={\"Please enter \" + capitalize(field)}\r\n                  defaultValue={initialValues[field]}\r\n                  ref={register({\r\n                    required: \"Required\",\r\n                  })}\r\n                />\r\n              );\r\n              break;\r\n            case \"file\":\r\n              inputUiInModal = (\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  name={field}\r\n                  placeholder={\"Please enter \" + capitalize(field)}\r\n                  ref={register({\r\n                    required: \"Required\",\r\n                  })}\r\n                />\r\n              );\r\n              break;\r\n            case \"boolean\":\r\n              inputUiInModal = [\r\n                <option key={`${field}_false`} value={Boolean(false)}>\r\n                  False\r\n                </option>,\r\n                <option key={`${field}_true`} value={Boolean(true)}>\r\n                  True\r\n                </option>,\r\n              ];\r\n              break;\r\n            // type undefined due to field has $ref\r\n            default:\r\n              let fieldsOfObject;\r\n              if (fullRef.properties[field][\"$ref\"]) {\r\n                const tempRef = fullRef.properties[field].$ref\r\n                  .replace(\"#/definitions\", \"\")\r\n                  .replace(\"/\", \"\");\r\n                fieldsOfObject = specsJson.definitions[tempRef];\r\n\r\n                //TODO: map all keys\r\n                inputUiInModal = (\r\n                  <Form.Group\r\n                    key={field}\r\n                    as={Col}\r\n                    controlId={`${field}_${indx}`}\r\n                    ref={register({\r\n                      required: \"Required\",\r\n                    })}\r\n                    name={field}\r\n                  >\r\n                    {Object.keys(fieldsOfObject.properties).map((subField) => {\r\n                      return (\r\n                        <Form.Control\r\n                          key={`${subField}_${indx}`}\r\n                          type={\r\n                            fieldsOfObject.properties[subField].type ===\r\n                            \"string\"\r\n                              ? \"text\"\r\n                              : \"number\"\r\n                          }\r\n                          name={field + \".\" + subField} // This cast the value to \"object\"\r\n                          placeholder={\r\n                            capitalize(field) + \"-\" + capitalize(subField)\r\n                          }\r\n                          ref={register({\r\n                            required: \"Required\",\r\n                          })}\r\n                          // separate betwwen the post and the put methods.\r\n                          defaultValue={\r\n                            Object.keys(initialValues).length > 0\r\n                              ? initialValues[field]\r\n                                ? initialValues[field][subField]\r\n                                : null\r\n                              : null\r\n                          }\r\n                        />\r\n                      );\r\n                    })}\r\n                  </Form.Group>\r\n                );\r\n              } else {\r\n                //TODO: doesnt work for all cases\r\n                inputUiInModal = (\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    name={field}\r\n                    placeholder={\"Please enter \" + capitalize(field)}\r\n                    ref={register({\r\n                      required: \"Required\",\r\n                    })}\r\n                  />\r\n                );\r\n              }\r\n          }\r\n          return (\r\n            <Form.Group\r\n              key={`${field}_${indx}`}\r\n              as={Row}\r\n              controlId={`${field}_${indx}`}\r\n            >\r\n              <Col>\r\n                <FormLabel> {capitalize(field)}</FormLabel>\r\n              </Col>\r\n              <Col>\r\n                {Array.isArray(inputUiInModal) ? (\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    name={field}\r\n                    ref={register({\r\n                      required: \"Required\",\r\n                    })}\r\n                    defaultValue={initialValues[field]}\r\n                  >\r\n                    {inputUiInModal}\r\n                  </Form.Control>\r\n                ) : (\r\n                  inputUiInModal\r\n                )}\r\n              </Col>\r\n            </Form.Group>\r\n          );\r\n        }),\r\n      ];\r\n      setFormInModal(arrayOfFiledsElements);\r\n    } else {\r\n      arrayOfFiledsElements = [\r\n        ...arrayOfFiledsElements,\r\n        optionData[1][method].parameters.map((field, indx) => {\r\n          let inputUiInModal;\r\n          switch (field.type) {\r\n            case \"array\":\r\n              inputUiInModal = (\r\n                <Form.Control\r\n                  type={field.type === \"string\" ? \"text\" : \"number\"} // TODO: another switch\r\n                  name={field.name + \"[0]\"} // This cast the value to \"array\"\r\n                  placeholder={\"Please separate by comma\"}\r\n                  ref={register({\r\n                    required: \"Required\",\r\n                  })}\r\n                />\r\n              );\r\n              break;\r\n            case \"string\":\r\n              inputUiInModal = (\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name={field.name}\r\n                  placeholder={\"Please enter \" + capitalize(field.name)}\r\n                  ref={register({\r\n                    required: \"Required\",\r\n                  })}\r\n                />\r\n              );\r\n              break;\r\n            case \"integer\":\r\n              inputUiInModal = (\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  name={field.name}\r\n                  placeholder={\"Please enter \" + capitalize(field.name)}\r\n                  ref={register({\r\n                    required: \"Required\",\r\n                  })}\r\n                />\r\n              );\r\n              break;\r\n            case \"file\":\r\n              inputUiInModal = (\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  name={field.name}\r\n                  placeholder={\"Please enter \" + capitalize(field.name)}\r\n                  ref={register({\r\n                    required: \"Required\",\r\n                  })}\r\n                />\r\n              );\r\n              break;\r\n            default:\r\n              inputUiInModal = (\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name={field.name + \".\" + field.name} // This cast the value to \"object\"\r\n                  placeholder={\"Please enter \" + capitalize(field.name)}\r\n                  ref={register({\r\n                    required: \"Required\",\r\n                  })}\r\n                />\r\n              );\r\n              break;\r\n          }\r\n          return (\r\n            <Form.Group\r\n              key={`${field.name}_${indx}`}\r\n              as={Row}\r\n              controlId={`${field.name}_${indx}`}\r\n            >\r\n              <Col>\r\n                <FormLabel> {capitalize(field.name)}</FormLabel>\r\n              </Col>\r\n              <Col>{inputUiInModal}</Col>\r\n            </Form.Group>\r\n          );\r\n        }),\r\n      ];\r\n      setFormInModal(arrayOfFiledsElements);\r\n    }\r\n  };\r\n\r\n  const handleEditClicked = (index) => {\r\n    // extract the current row where the button \"edit\" has clicked\r\n    const row = tableDataArray[index];\r\n    // extract the current endpoint\r\n    const optionData = isPutInService[0];\r\n    // function that display the fileds and analyze its type\r\n    extractFieldsFromDefinitions(optionData, row, \"put\");\r\n  };\r\n\r\n  const handleDeleteClicked = (index) => {\r\n    const row = tableDataArray[index];\r\n    const identifier = Object.keys(row)[0];\r\n    const reqPath = isDeleteInService[0];\r\n    const idValue = row[identifier];\r\n    const startIndex = reqPath.indexOf(\"{\");\r\n    const endIndex = reqPath.indexOf(\"}\");\r\n    const identifierTerm = reqPath.substring(startIndex + 1, endIndex);\r\n\r\n    setOpenDeletePopupDialog(false);\r\n\r\n    const reqPathToSend = reqPath.replace(\"{\" + identifierTerm + \"}\", idValue);\r\n    callApi(`${baseApiUrl}${reqPathToSend}`, { method: \"DELETE\" }).then(() => {\r\n      notifyDelete();\r\n\r\n      // reset the table\r\n      callApi(null);\r\n\r\n      // reset all filters value\r\n      let newDisplayFilters = [...displayFilters];\r\n      let i;\r\n      for (i = 0; i < newDisplayFilters.length; i++) {\r\n        newDisplayFilters[i] = {\r\n          ...newDisplayFilters[i],\r\n          value: \"\",\r\n        };\r\n      }\r\n\r\n      setDisplayFilters(newDisplayFilters);\r\n    });\r\n  };\r\n\r\n  const handleSubmitInModal = (data) => {\r\n    let reqVal = currentActionClicked.substring(1);\r\n    if (reqVal.includes(\"{\") && reqVal.includes(\"}\")) {\r\n      const startIndex = reqVal.indexOf(\"{\") + 1;\r\n      const endIndex = reqVal.indexOf(\"}\");\r\n      const parameterName = reqVal.substring(startIndex, endIndex);\r\n      reqVal = reqVal\r\n        .replace(\"{\", \"\")\r\n        .replace(\"}\", \"\")\r\n        .replace(parameterName, data[parameterName]);\r\n    }\r\n\r\n    const currentEndpointIndex = serviceEndpointsWithPostOption.findIndex(\r\n      (path) => path[0] === currentActionClicked\r\n    );\r\n\r\n    const endpoint = serviceEndpointsWithPostOption[currentEndpointIndex];\r\n\r\n    let contentType = \"\";\r\n    let reqBody = \"\";\r\n\r\n    switch (endpoint[1].post.consumes[0]) {\r\n      case \"application/x-www-form-urlencoded\":\r\n        contentType = \"application/x-www-form-urlencoded\";\r\n\r\n        const params = [];\r\n        Object.keys(data).forEach((property) => {\r\n          var encodedKey = encodeURIComponent(property);\r\n          var encodedValue = encodeURIComponent(data[property]);\r\n          params.push(encodedKey + \"=\" + encodedValue);\r\n        });\r\n\r\n        reqBody = params.join(\"&\");\r\n        break;\r\n\r\n      default:\r\n        contentType = \"application/json\";\r\n        reqBody = JSON.stringify(data);\r\n    }\r\n\r\n    callApi(`${baseApiUrl}/${reqVal.toLowerCase()}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": contentType,\r\n      },\r\n      body: reqBody,\r\n    }).then(() => {\r\n      setOpenPopupDialog((prevState) => !prevState);\r\n      notifySubmit();\r\n    });\r\n  };\r\n\r\n  const handlePostOptionClicked = (indexOfOption, path) => {\r\n    const optionData = serviceEndpointsWithPostOption[indexOfOption];\r\n    setCurrentActionClicked(path);\r\n    extractFieldsFromDefinitions(optionData);\r\n  };\r\n\r\n  // to inizialize the index of the item in navbar and reset the response\r\n  const handleMenuItemClick = (index) => {\r\n    setSelectedDefinitionIndex(index);\r\n    callApi(null);\r\n  };\r\n  // handle on changing input in the filters\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n\r\n    const currentInputIndex = displayFilters.findIndex((d) => d.name === name);\r\n    let newDisplayFilters = [...displayFilters];\r\n\r\n    // reset previous value of another filter\r\n    let i;\r\n    for (i = 0; i < newDisplayFilters.length; i++) {\r\n      if (i === currentInputIndex) {\r\n        newDisplayFilters[currentInputIndex] = {\r\n          ...newDisplayFilters[currentInputIndex],\r\n          value,\r\n        };\r\n      } else {\r\n        newDisplayFilters[i] = {\r\n          ...newDisplayFilters[i],\r\n          value: \"\",\r\n        };\r\n      }\r\n    }\r\n\r\n    setDisplayFilters(newDisplayFilters);\r\n    // handle the case which has no value inserted- reset response\r\n    if (!value) {\r\n      callApi(null);\r\n      return;\r\n    }\r\n    // handle and get the data by the inserted value\r\n    const endpoint = serviceEndpointsWithGetOption[currentInputIndex];\r\n    //TODO: problem when typing id in \"store\"\r\n    switch (endpoint[1].get.parameters[0].in) {\r\n      case \"query\":\r\n        callApi(`${baseApiUrl}${endpoint[0]}?${name}=${value}`);\r\n        break;\r\n      case \"path\":\r\n        const inputVarName = endpoint[1].get.parameters[0].name;\r\n        const reqUrl = endpoint[0]\r\n          .replace(inputVarName, value)\r\n          .replace(\"{\", \"\")\r\n          .replace(\"}\", \"\");\r\n        callApi(`${baseApiUrl}${reqUrl}`);\r\n        break;\r\n      //TODO: alert if the case is the default\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  // build 'get' fields to the UI\r\n  serviceEndpointsWithGetOption.forEach((ep) => {\r\n    const epParamsArray = ep[1].get.parameters;\r\n    epParamsArray.forEach((epParams) => {\r\n      switch (epParams.type) {\r\n        case \"integer\":\r\n          displayFiltersArray = [\r\n            ...displayFiltersArray,\r\n            {\r\n              name: epParams.name,\r\n              type: \"number\",\r\n              value: \"\",\r\n            },\r\n          ];\r\n          break;\r\n\r\n        case \"array\":\r\n          const options = epParams.items.enum ? epParams.items.enum : [];\r\n          displayFiltersArray = [\r\n            ...displayFiltersArray,\r\n            {\r\n              name: epParams.name,\r\n              type: \"array\",\r\n              options,\r\n              value: \"\",\r\n            },\r\n          ];\r\n          break;\r\n\r\n        default:\r\n          displayFiltersArray = [\r\n            ...displayFiltersArray,\r\n            {\r\n              name: epParams.name,\r\n              value: \"\",\r\n            },\r\n          ];\r\n          break;\r\n      }\r\n    });\r\n  });\r\n\r\n  let displayPostOptionsArray = [];\r\n\r\n  serviceEndpointsWithPostOption.forEach((ep) => {\r\n    const postDetails = { path: ep[0], operation: ep[1].post.operationId };\r\n    displayPostOptionsArray = [...displayPostOptionsArray, postDetails];\r\n  });\r\n\r\n  // assigning items into array\r\n  if (data) {\r\n    switch (getObjectType(data)) {\r\n      case \"array\":\r\n        tableDataArray.push(...data);\r\n        break;\r\n\r\n      case \"object\":\r\n        tableDataArray.push(data);\r\n        break;\r\n\r\n      default:\r\n        throw new Error(\"unsupported object type\");\r\n    }\r\n  }\r\n  //end here\r\n\r\n  React.useEffect(\r\n    () => setDisplayFilters(displayFiltersArray),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [JSON.stringify(displayFiltersArray)]\r\n  );\r\n\r\n  const uiObject = {\r\n    displayFilters,\r\n    tableColumns,\r\n    tableDataArray,\r\n    displayPostOptionsArray,\r\n    formInModal,\r\n    errors,\r\n  };\r\n\r\n  const editDeleteButtons = {\r\n    isPutInService,\r\n    isDeleteInService,\r\n  };\r\n\r\n  return (\r\n    <GenerateView\r\n      appInfo={specsJson.info}\r\n      menuItems={services}\r\n      selectedMenuItemIndex={selectedDefinitionIndex}\r\n      uiObject={uiObject}\r\n      editDeleteButtons={editDeleteButtons}\r\n      fetchResponse={{ data, error, loading }}\r\n      onUiInputChange={handleInputChange}\r\n      onMenuItemClick={handleMenuItemClick}\r\n      onPostOptionClicked={handlePostOptionClicked}\r\n      onSubmit={handleSubmit(handleSubmitInModal)}\r\n      onEditClicked={handleEditClicked}\r\n      onDeleteClicked={(id) => {\r\n        setDeleteObjectId(id);\r\n        setOpenDeletePopupDialog(true);\r\n      }}\r\n      closeOpenDeletePopUpDialog={() =>\r\n        setOpenDeletePopupDialog((prevState) => !prevState)\r\n      }\r\n      openDeletePopupDialog={openDeletePopupDialog}\r\n      onDeleteConfirmed={() => handleDeleteClicked(deleteObjectId)}\r\n      onTogglePopupDialog={() => setOpenPopupDialog((prevState) => !prevState)}\r\n      openPopupDialog={openPopupDialog}\r\n    />\r\n  );\r\n};\r\n\r\nCreateComponents.propTypes = {\r\n  specsJson: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CreateComponents;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport CreateComponents from \"./CreateComponents\";\r\nimport { useFetch } from \"../hooks/useFetch\";\r\n\r\n//import { mockData } from '../mockData';\r\n\r\nconst GetJsonApi = ({ specsApiUrl }) => {\r\n  const [{ data, loading, error }] = useFetch(specsApiUrl);\r\n  return loading ? (\r\n    <div>Loading...</div>\r\n  ) : error ? (\r\n    <div>Fetch failed: {error}</div>\r\n  ) : (\r\n    data && <CreateComponents specsJson={data} />\r\n  );\r\n};\r\n\r\nGetJsonApi.propTypes = {\r\n  specsApiUrl: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GetJsonApi;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Header.css\";\r\nimport { Form, Button, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nconst Header = ({\r\n  title,\r\n  label,\r\n  inputApiUrlValue,\r\n  onFormSubmit,\r\n  onInputApiUrlChange,\r\n}) => {\r\n  return (\r\n    <div className=\"app-header\">\r\n      <div className=\"container\">\r\n        <h2>{title}</h2>\r\n        <Form className=\"form-inline\" onSubmit={onFormSubmit}>\r\n          <label htmlFor=\"api-url\">{label}</label>\r\n          <InputGroup style={{ width: \"65%\" }}>\r\n            <FormControl\r\n              id=\"api-utl-input\"\r\n              name=\"api-url\"\r\n              className=\"ml-3\"\r\n              placeholder=\"Example: https://petstore.swagger.io/v2/swagger.json\"\r\n              value={inputApiUrlValue}\r\n              onChange={onInputApiUrlChange}\r\n            />\r\n          </InputGroup>\r\n          <Button type=\"submit\" className=\"ml-3\">\r\n            Update\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  inputApiUrlValue: PropTypes.string.isRequired,\r\n  onFormSubmit: PropTypes.func.isRequired,\r\n  onInputApiUrlChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport GetJsonApi from \"./components/GetJsonApi\";\r\nimport Header from \"./components/Header\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [intputApiValue, setInputApiValue] = useState(\r\n    \"https://petstore.swagger.io/v2/swagger.json\"\r\n  );\r\n\r\n  const [swaggerApi, setSwaggerApi] = useState(intputApiValue);\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSwaggerApi(intputApiValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header\r\n        title=\"Dynamic UI\"\r\n        label=\"OpenApi 2.0 source URL:\"\r\n        inputApiUrlValue={intputApiValue}\r\n        onInputApiUrlChange={(e) => setInputApiValue(e.target.value)}\r\n        onFormSubmit={handleFormSubmit}\r\n      />\r\n      <div className=\"container p-0 content-container\">\r\n        <GetJsonApi specsApiUrl={swaggerApi} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n// import MainComponent from \"./components/MainComponent\";\r\n// import openApiJson from \"./openApiJson.json\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  // <MainComponent serviceName=\"pet\" methodName=\"\" specsJson={openApiJson} />,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}